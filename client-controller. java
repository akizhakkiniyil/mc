package com.example.accessgovernance.controller;

import com.example.accessgovernance.service.AccessGovernanceClientService;
import com.example.accessgovernance.service.model.AccessRecommendation;
import com.example.accessgovernance.service.model.AnomalyExplanation;
import com.example.accessgovernance.service.model.PolicyDriftExplanation;
import lombok.RequiredArgsConstructor;
import org.springframework.http.MediaType; // Import MediaType
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import reactor.core.publisher.Flux; // Import Flux for streaming

import java.time.LocalDate;

@RestController
@RequestMapping("/access-ai")
@RequiredArgsConstructor
public class AccessGovernanceController {

    private final AccessGovernanceClientService clientService;

    /**
     * General chat endpoint, can use tools for basic data retrieval (synchronous).
     * Example: GET /access-ai/chat?query=What department is Alice Johnson in?
     */
    @GetMapping("/chat")
    public String chat(@RequestParam String query) {
        return clientService.generalChat(query);
    }

    /**
     * General chat endpoint with streaming responses, can use tools for basic data retrieval.
     * Example: GET /access-ai/stream-chat?query=Can you tell me everything about employee emp001?
     */
    @GetMapping(value = "/stream-chat", produces = MediaType.TEXT_EVENT_STREAM_VALUE)
    public Flux<String> streamChat(@RequestParam String query) {
        return clientService.streamGeneralChat(query);
    }

    /**
     * Recommends group memberships for a new joiner or role change.
     * Example: GET /access-ai/recommend-access?employeeId=new001&employeeName=John%20Doe&department=Engineering&role=Software%20Engineer&lineManagerId=mgr001
     */
    @GetMapping("/recommend-access")
    public AccessRecommendation recommendAccess(
            @RequestParam String employeeId,
            @RequestParam String employeeName,
            @RequestParam String department,
            @RequestParam String role,
            @RequestParam String lineManagerId) {
        return clientService.recommendAccess(employeeId, employeeName, department, role, lineManagerId);
    }

    /**
     * Explains a detected access anomaly for an employee.
     * Example: GET /access-ai/explain-anomaly?employeeId=emp001
     */
    @GetMapping("/explain-anomaly")
    public AnomalyExplanation explainAnomaly(@RequestParam String employeeId) {
        return clientService.explainAnomaly(employeeId);
    }

    /**
     * Explains policy drift for a specific group.
     * Example: GET /access-ai/explain-policy-drift?groupId=grp001&baselineDate=2024-01-01
     */
    @GetMapping("/explain-policy-drift")
    public PolicyDriftExplanation explainPolicyDrift(
            @RequestParam String groupId,
            @RequestParam String baselineDate) {
        return clientService.explainPolicyDrift(groupId, LocalDate.parse(baselineDate));
    }
}
